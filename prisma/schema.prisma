// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
   previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  password String
  faceId String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Avatar String?
  refreshToken RefreshToken? 
  company   Company?    @relation(fields: [companyId], references: [id])
  companyId Int?
  permissions   Permissions?   @relation(fields: [permissionsID], references: [id])
  permissionsID Int?
  employee Employee?  @relation(fields: [employeeId], references: [id])
  employeeId Int?
}

model Employee {
  id      Int      @id @default(autoincrement())
  name String
  cpf String
  pis String
  department   Department?    @relation(fields: [departmentId], references: [id])
  departmentId Int?
  appointmentConfiguration   AppointmentConfiguration?    @relation(fields: [appointmentConfigurationId], references: [id])
  appointmentConfigurationId Int?
  user User?
  appointment Appointment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   
}

model Company {
  id  Int      @id @default(autoincrement())
  cnpj String
  fantasyName String
  users User[]
  department Department[]
  permissions Permissions[]
  appointmentConfiguration AppointmentConfiguration[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id  Int      @id @default(autoincrement())
  name   String   @unique
  company   Company    @relation(fields: [companyId], references: [id])
  companyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  employer Employee[]
  appointment Appointment[]
}

model RefreshToken {
  id Int      @id @default(autoincrement())
  expiresIn Int
  user   User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}
model Permissions {
  id Int      @id @default(autoincrement())
  name String
  description String
  company   Company    @relation(fields: [companyId], references: [id])
  companyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User[]
}

model AppointmentConfiguration {
  id Int      @id @default(autoincrement())
  startTime  DateTime
  startTimeEnd  DateTime
  endTime DateTime
  endTimeEnd DateTime
  company   Company    @relation(fields: [companyId], references: [id])
  companyId Int
  employer Employee[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id Int      @id @default(autoincrement())
  appointmentTime  DateTime
  department   Department?    @relation(fields: [departmentId], references: [id])
  departmentId Int?
  employee Employee?  @relation(fields: [employeeId], references: [id])
  employeeId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




